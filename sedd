# meta developer: @Xanaxx_potrebitel
# scope: hikka_only
# requires: ffmpeg

import os
import random
import asyncio
import json
from pathlib import Path

from .. import loader, utils


@loader.tds
class UltimateEditorMod(loader.Module):
    """ULTIMATE —Ä–µ–¥–∞–∫—Ç–æ—Ä —Å —à–∞–±–ª–æ–Ω–∞–º–∏ 2025"""

    strings = {
        "name": "Ultimate Editor",
        "processing": "üé¨ –°–æ–∑–¥–∞—é –º–µ–≥–∞-—ç–¥–∏—Ç...",
        "done": "‚úÖ –≠–¥–∏—Ç –≥–æ—Ç–æ–≤!",
        "error": "‚ùå –û—à–∏–±–∫–∞",
        "no_reply": "‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –º–µ–¥–∏–∞",
        "templates": "üé¨ –®–∞–±–ª–æ–Ω—ã 2025:\n{}",
    }

    def __init__(self):
        self.templates = {
            "1": {"name": "DARK TRAP", "filters": "bass+glitch+night", "color": "üñ§"},
            "2": {"name": "NEON DREAM", "filters": "rgb+vibe+echo", "color": "üíñ"},
            "3": {"name": "SLOW WAVE", "filters": "slow+reverb+deep", "color": "üåä"},
            "4": {"name": "GLITCH CORE", "filters": "glitch+reverse+bass", "color": "üìü"},
            "5": {"name": "NIGHT DRIVE", "filters": "night+deep+vibe", "color": "üåô"},
            "6": {"name": "PSYCHEDELIC", "filters": "rgb+glitch+echo", "color": "üåà"},
            "7": {"name": "BASS BOOST", "filters": "bass+deep+reverb", "color": "üîä"},
            "8": {"name": "REVERSE TRIP", "filters": "reverse+glitch+vibe", "color": "‚è™"},
            "9": {"name": "ECHO CHAMBER", "filters": "echo+reverb+slow", "color": "üîÅ"},
            "10": {"name": "DEEP NIGHT", "filters": "deep+night+bass", "color": "üåÉ"},
            "11": {"name": "VIBE SHIFT", "filters": "vibe+rgb+echo", "color": "üé≠"},
            "12": {"name": "GLITCH BASS", "filters": "glitch+bass+reverse", "color": "üéõÔ∏è"},
            "13": {"name": "SLOW DREAM", "filters": "slow+vibe+reverb", "color": "üí§"},
            "14": {"name": "NEON BASS", "filters": "rgb+bass+glitch", "color": "üíú"},
            "15": {"name": "ULTIMATE MIX", "filters": "bass+slow+reverse+vibe+glitch+night+rgb+deep+echo+reverb", "color": "‚ö°"},
        }

    async def client_ready(self, client, db):
        self.client = client
        self.db = db

    @loader.owner
    async def editcmd(self, message):
        """.edit <—Ñ–∏–ª—å—Ç—Ä—ã —á–µ—Ä–µ–∑ +> <reply> - –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–¥–∏—Ç—ã\n–§–∏–ª—å—Ç—Ä—ã: bass, slow, reverse, vibe, glitch, night, rgb, deep, echo, reverb"""
        reply = await message.get_reply_message()
        if not reply or not getattr(reply, 'video', None):
            return await utils.answer(message, self.strings["no_reply"])

        args = utils.get_args_raw(message)
        if not args:
            return await utils.answer(message, "‚ùå –£–∫–∞–∂–∏ —Ñ–∏–ª—å—Ç—Ä—ã —á–µ—Ä–µ–∑ + (–Ω–∞–ø—Ä–∏–º–µ—Ä: bass+slow+reverb)")

        await utils.answer(message, self.strings["processing"])
        await self._process_edit(message, reply, args.split('+'))

    @loader.owner
    async def edit1cmd(self, message):
        """.edit1 <–Ω–æ–º–µ—Ä —à–∞–±–ª–æ–Ω–∞ 1-15> <reply> - –≠–¥–∏—Ç –ø–æ —à–∞–±–ª–æ–Ω—É 2025"""
        reply = await message.get_reply_message()
        if not reply:
            return await utils.answer(message, self.strings["no_reply"])

        args = utils.get_args_raw(message)
        if not args or args not in self.templates:
            return await utils.answer(message, "‚ùå –£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä —à–∞–±–ª–æ–Ω–∞ 1-15")

        template = self.templates[args]
        await utils.answer(message, f"üé¨ –®–∞–±–ª–æ–Ω: {template['color']} {template['name']}")

        filters = template["filters"].split('+')
        await self._process_edit(message, reply, filters)

    @loader.owner
    async def templatescmd(self, message):
        """.templates - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —à–∞–±–ª–æ–Ω—ã"""
        template_list = []
        for num, template in self.templates.items():
            template_list.append(f"{num}. {template['color']} {template['name']} - {template['filters']}")
        
        await utils.answer(message, self.strings["templates"].format("\n".join(template_list)))

    async def _process_edit(self, message, reply, filters):
        input_path = f"/tmp/edit_in_{message.id}.mp4"
        output_path = f"/tmp/edit_out_{message.id}.mp4"

        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
            video_data = await reply.download_media(bytes)
            with open(input_path, "wb") as f:
                f.write(video_data)

            # –°—Ç—Ä–æ–∏–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
            video_filters = []
            audio_filters = []

            for filter_name in filters:
                if filter_name in ["bass", "deep"]:
                    audio_filters.append("bass=g=20" if filter_name == "bass" else "bass=g=25:f=100, asubboost")
                elif filter_name == "slow":
                    video_filters.append("setpts=2.0*PTS")
                    audio_filters.append("atempo=0.5")
                elif filter_name == "reverse":
                    video_filters.append("reverse")
                    audio_filters.append("areverse")
                elif filter_name == "vibe":
                    video_filters.append("split [main][back]; [back] scale=ih*16/9:-1, boxblur=20, crop=iw:ih [blur]; [main] scale=-1:720 [main]; [blur][main] overlay=(W-w)/2:(H-h)/2, eq=brightness=0.05:contrast=1.1:saturation=1.2")
                elif filter_name == "glitch":
                    video_filters.append("noise=alls=20:allf=t+u, hue=s=5, crop=in_w-10:in_h-10:5:5")
                    audio_filters.append("vibrato=f=10:d=0.8")
                elif filter_name == "night":
                    video_filters.append("curves=preset=lighter, hue=h=10:s=0.8, eq=brightness=-0.05:contrast=1.2")
                    audio_filters.append("highpass=f=200, lowpass=f=3000")
                elif filter_name == "rgb":
                    video_filters.append("split=3 [r][g][b]; [r] lutrgb=g=0:b=0 [red]; [g] lutrgb=r=0:b=0 [green]; [b] lutrgb=r=0:g=0 [blue]; [red][green] blend=all_mode=screen [rg]; [rg][blue] blend=all_mode=screen")
                    audio_filters.append("aphaser=type=t:speed=2")
                elif filter_name == "echo":
                    audio_filters.append("aecho=0.8:0.88:1000:0.4")
                elif filter_name == "reverb":
                    audio_filters.append("aecho=0.8:0.8:100:0.8, areverb")

            # –°–æ–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É ffmpeg
            cmd = ["ffmpeg", "-i", input_path]

            if video_filters:
                cmd.extend(["-vf", ",".join(video_filters)])
            if audio_filters:
                cmd.extend(["-af", ",".join(audio_filters)])

            cmd.extend(["-preset", "fast", "-crf", "23", "-y", output_path])

            # –í—ã–ø–æ–ª–Ω—è–µ–º
            process = await asyncio.create_subprocess_exec(*cmd)
            await process.wait()

            if process.returncode != 0:
                raise Exception("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            with open(output_path, "rb") as f:
                await self.client.send_file(
                    message.chat_id,
                    f,
                    caption=f"üé¨ –≠–¥–∏—Ç: {'+'.join(filters).upper()}",
                    reply_to=reply.id,
                    supports_streaming=True
                )

            await utils.answer(message, self.strings["done"])

        except Exception as e:
            await utils.answer(message, f"{self.strings['error']}: {str(e)}")
        finally:
            self._cleanup_files(input_path, output_path)

    def _cleanup_files(self, *files):
        for file_path in files:
            try:
                if file_path and os.path.exists(file_path):
                    os.remove(file_path)
            except:
                pass


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–ª—å–±–æ–º–∞–º–∏
@loader.tds
class AlbumEditorMod(loader.Module):
    """–†–µ–¥–∞–∫—Ç–æ—Ä –∞–ª—å–±–æ–º–æ–≤ —Å —à–∞–±–ª–æ–Ω–∞–º–∏"""

    strings = {"name": "Album Editor"}

    @loader.owner
    async def edit1cmd(self, message):
        """.edit1 <–Ω–æ–º–µ—Ä —à–∞–±–ª–æ–Ω–∞> <reply> - –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∞–ª—å–±–æ–º –ø–æ —à–∞–±–ª–æ–Ω—É"""
        reply = await message.get_reply_message()
        if not reply:
            return await utils.answer(message, "‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –∞–ª—å–±–æ–º")

        args = utils.get_args_raw(message)
        if not args:
            return await utils.answer(message, "‚ùå –£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä —à–∞–±–ª–æ–Ω–∞ 1-15")

        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª—å–±–æ–º–∞
        await utils.answer(message, "üé¨ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞–ª—å–±–æ–º...")
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ª—å–±–æ–º–∞

    @loader.owner
    async def templatecmd(self, message):
        """.template <–Ω–æ–º–µ—Ä> - –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä —à–∞–±–ª–æ–Ω–∞"""
        args = utils.get_args_raw(message)
        if not args:
            return await utils.answer(message, "‚ùå –£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä —à–∞–±–ª–æ–Ω–∞ 1-15")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
        template_info = {
            "1": "üñ§ DARK TRAP - –¢–µ–º–Ω—ã–π —ç–¥–∏—Ç —Å –º–æ—â–Ω—ã–º –±–∞—Å–æ–º –∏ –≥–ª–∏—Ç—á–∞–º–∏",
            "2": "üíñ NEON DREAM - –ù–µ–æ–Ω–æ–≤—ã–µ —Ü–≤–µ—Ç–∞ –∏ –≤–∞–π–±–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã",
            "3": "üåä SLOW WAVE - –ú–µ–¥–ª–µ–Ω–Ω—ã–π –≤–∞–π–± —Å —Ä–µ–≤–µ—Ä–±–µ—Ä–∞—Ü–∏–µ–π",
            # ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
        }

        if args in template_info:
            await utils.answer(message, f"üé¨ –®–∞–±–ª–æ–Ω {args}:\n{template_info[args]}")
        else:
            await utils.answer(message, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–±–ª–æ–Ω")
